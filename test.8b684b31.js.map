{"mappings":"AAAA","sources":["src/js/test.js"],"sourcesContent":["'use strict';\n\n// function checkAge(age) {\n//   if (age >= 18) { // Change this line\n//     return \"You are an adult\";\n//   }\n\n//   return \"You are a minor\";\n// }\n\n// console.log(checkAge(20));\n\n// «перебрати»  поелементно\n\n// const fruits = ['apple', 'plum', 'pear', 'orange'];\n\n// for (let i = 0; i < fruits.length; i += 1) { // Change this line\n//   const fruit = fruits[i]; // Change this line\n//   console.log(fruit);\n// }\n\n// Напиши функцію, яка приймає один параметр order - масив чисел, і обчислює загальну суму його елементів\n\n// function calculateTotalPrice(order) {\n//   let total = 0;\n\n//   for (let i = 0; i < order.length; i++) {\n//     total += order[i];\n//   }\n//   return total;\n// }\n\n// console.log(calculateTotalPrice([12, 85, 37, 4]));\n// console.log(calculateTotalPrice([164, 48, 291]));\n\n// Напиши функцію, яка приймає довільний рядок, що складається тільки зі слів,\n// розділених пробілом(параметр string), і повертає найдовше слово в цьому рядку.\n\n// function findLongestWord(string) {\n//   let stringSplit = string.split(' ');\n//   let longestWord = \"\";\n\n//   for (let word of stringSplit) {\n//     if (word.length > longestWord.length) {\n//       longestWord = word;\n//     }\n//   }\n//   return longestWord;\n// }\n\n// console.log(findLongestWord(\"The quick brown fox jumped over the lazy dog\"));\n\n// Напиши функцію slugify(string) яка отримує рядок і повертає URL-slug\n// Рядок складається тільки з літер і пробілів\n\n// const findSmallesNumber = function (numbers) {\n//   let smallestNumber = numbers[0];\n\n//   for (const number of numbers) {\n//     if (number < smallestNumber) {\n//       smallestNumber = number;\n//     }\n//   }\n\n//   return smallestNumber;\n// };\n\n// Доповни код функції(min, max) таким чином, щоб вона повертала масив усіх цілих чисел від значення min до max.\n\n// function createArrayOfNumbers(min, max) {\n//   const numbers = [];\n\n// for(let i = min; i <= max; i++) {\n//   numbers.push(i);\n//   }\n\n//   return numbers;\n// }\n\n// console.log(createArrayOfNumbers(1, 3));\n// console.log(createArrayOfNumbers(14,17));\n// console.log(createArrayOfNumbers(29,34));\n\n// Напиши функцію, яка отримує два масиви довільної довжини в параметри array1 і array2,\n// і повертає новий масив, що складається з тих елементів, які присутні в обох вихідних масивах.\n\n// function getCommonElements(array1, array2) {\n// const uniqueElements = [];\n\n//   for (const element of array1) {\n//     if (array2.includes(element)) {\n//       uniqueElements.push(element);\n//     }\n//   }\n//   return uniqueElements;\n// }\n\n// console.log(getCommonElements([1, 2, 3], [2, 4]));\n// console.log (getCommonElements([1, 2, 3], [2, 1, 17, 19]));\n// console.log (getCommonElements([24, 12, 27, 3], [12, 8, 3, 36, 27]));\n// console.log (getCommonElements([10, 20, 30, 40], [4, 30, 17, 10, 40]));\n\n// function getEvenNumbers(start, end) {\n//   const evenNumbers = [];\n\n// for (let i = start; i <= end; i++) {\n//   if (i % 2 === 0) {\n//      evenNumbers.push(i);\n//   }\n\n// }\n//   return numbers;\n// }\n\n// Method filter()\n\n// const LOW_SCORE = 50;\n// const HIGH_SCORE = 80;\n// const students = [\n//   { name: \"Манго\", score: 83 },\n//   { name: \"Полі\", score: 59 },\n//   { name: \"Аякс\", score: 37 },\n//   { name: \"Ківі\", score: 94 },\n//   { name: \"Х'юстон\", score: 64 },\n// ];\n\n// const best = students.filter(student => student.score >= HIGH_SCORE);\n// console.log(best); // Масив об'єктів з іменами Манго і Ківі\n\n// const worst = students.filter(student => student.score < LOW_SCORE);\n// console.log(worst); // Масив з одним об'єктом Аякс\n\n// // В колбек-функції зручно деструктуризувати властивості об'єкта\n// const average = students.filter(\n//   ({ score }) => score >= LOW_SCORE && score < HIGH_SCORE\n// );\n// console.log(average); // Масив об'єктів з іменами Полі і Х'юстон\n\n// Method find()\n\n// const colorPickerOptions = [\n//   { label: \"red\", color: \"#F44336\" },\n//   { label: \"green\", color: \"#4CAF50\" },\n//   { label: \"blue\", color: \"#2196F3\" },\n//   { label: \"pink\", color: \"#E91E63\" },\n//   { label: \"indigo\", color: \"#3F51B5\" },\n// ];\n\n// console.log(colorPickerOptions.find(option => option.label === \"blue\"));// { label: 'blue', color: '#2196F3' }\n// console.log(colorPickerOptions.find(option => option.label === \"pink\"));// { label: 'pink', color: '#E91E63' }\n// console.log(colorPickerOptions.find(option => option.label === \"white\"));// undefined\n\n// Method findIndex()\n\n// const colorPickerOptions = [\n//   { label: \"red\", color: \"#F44336\" },\n//   { label: \"green\", color: \"#4CAF50\" },\n//   { label: \"blue\", color: \"#2196F3\" },\n//   { label: \"pink\", color: \"#E91E63\" },\n//   { label: \"indigo\", color: \"#3F51B5\" },\n// ];\n\n// console.log(colorPickerOptions.findIndex(option => option.label === \"blue\"));// 2\n// console.log(colorPickerOptions.findIndex(option => option.label === \"pink\"));// 3\n// console.log(colorPickerOptions.findIndex(option => option.label === \"white\"));// -1\n\n// Method reduce()\n\n// const total = [2, 7, 3, 14, 6].reduce((previousValue, number) => {\n//   return previousValue + number;\n// }, 0);\n\n// console.log(total); // 32\n\n// Method chains\n\n// const students = [\n//   { name: \"Манго\", score: 83, courses: [\"математика\", \"фізика\"] },\n//   { name: \"Полі\", score: 59, courses: [\"інформатика\", \"математика\"] },\n//   { name: \"Аякс\", score: 37, courses: [\"фізика\", \"біологія\"] },\n//   { name: \"Ківі\", score: 94, courses: [\"література\", \"інформатика\"] },\n// ];\n\n// const names = [...students]\n//   .sort((a, b) => a.score - b.score)\n//   .map(student => student.name);\n\n// const uniqueSortedCourses = students\n//   .flatMap(student => student.courses)\n//   .filter((course, index, array) => array.indexOf(course) === index)\n//   .sort((a, b) => a.localeCompare(b));\n\n// console.log(names); // ['Аякс', 'Полі', 'Манго', 'Ківі']\n// console.log(uniqueSortedCourses); // ['біологія', 'інформатика', 'література', 'математика', 'фізика']\n\n// Change code below this line\n// const sortByDescendingFriendCount = users => {\n\n//   return [...users].sort((firstFriends, secondFriends) => secondFriends.friends.length - firstFriends.friends.lengt);\n// };\n\n// const CounterPlugin = function ({\n//   rootSelector,\n//   initialValue = 0,\n//   step = 1,\n//   onUpdate = () => null,\n// } = {}) {\n//   this._value = initialValue;\n//   this._step = step;\n//   this._refs = this._getRefs(rootSelector);\n\n//   this.onUpdate = onUpdate;\n\n//   this._bindEvents();\n//   this.updateValueUI();\n// };\n\n// CounterPlugin.prototype._getRefs = function (rootSelector) {\n//   const refs = {};\n//   refs.container = document.querySelector(rootSelector);\n//   refs.incrementBtn = refs.container.querySelector('[data-increment]');\n//   refs.decrementBtn = refs.container.querySelector('[data-decrement]');\n//   refs.value = refs.container.querySelector('[data-value]');\n\n//   return refs;\n// };\n\n// CounterPlugin.prototype._bindEvents = function () {\n//   this._refs.incrementBtn.addEventListener('click', () => {\n//     console.log('CounterPlugin.prototype._bindEvents -> this', this);\n//     this.increment();\n//     this.updateValueUI();\n//   });\n\n//   this._refs.decrementBtn.addEventListener('click', () => {\n//     console.log('CounterPlugin.prototype._bindEvents -> this', this);\n//     this.decrement();\n//     this.updateValueUI();\n//   });\n// };\n\n// CounterPlugin.prototype.updateValueUI = function () {\n//   this._refs.value.textContent = this._value;\n\n//   this.onUpdate();\n// };\n\n// CounterPlugin.prototype.increment = function () {\n//   this._value += this._step;\n// };\n\n// CounterPlugin.prototype.decrement = function () {\n//   this._value -= this._step;\n// };\n\n// new CounterPlugin({\n//   rootSelector: '#counter-1',\n//   step: 10,\n//   initialValue: 100,\n//   onUpdate: () => console.log('Это мой кастомный колбек для onUpdate'),\n// });\n\n// new CounterPlugin({ rootSelector: '#counter-2', step: 2 });\n\n// const customer = {\n//   username: \"Mango\",\n//   balance: 24000,\n//   discount: 0.1,\n//   orders: [\"Burger\", \"Pizza\", \"Salad\"],\n//   // Change code below this line\n//   getBalance() {\n//     return this.balance;\n//   },\n//   getDiscount() {\n//     return this.discount;\n//   },\n//   setDiscount(value) {\n//     this.discount = value;\n//   },\n//   getOrders() {\n//     return this.orders;\n//   },\n//   addOrder(cost, order) {\n//     this.balance -= cost - cost * this.discount;\n//     this.orders.push(order);\n//   },\n//   // Change code above this line\n// };\n\n// customer.setDiscount(0.15);\n// console.log(customer.getDiscount()); // 0.15\n// customer.addOrder(5000, \"Steak\");\n// console.log(customer.getBalance()); // 19750\n// console.log(customer.getOrders()); // [\"Burger\", \"Pizza\", \"Salad\", \"Steak\"]\n\n//   Напиши метод calcTotalPrice(stoneName), який приймає назву\n//   каменю, розраховує та повертає загальну вартість каміння з таким\n//   ім'ям із властивості stones\n\n// const chopShop = {\n//     stones: [\n//         { name: 'Emerald', price: 1500, quantity: 5 },\n//         { name: 'Diamond', price: 2800, quantity: 2 },\n//         { name: 'Sapphire', price: 1400, quantity: 9 },\n//         { name: 'Ruby', price: 700, quantity: 8 },\n//     ],\n\n//     calcTotalPrice(stoneName) {\n//         const stoneOblj = this.stones.find(({ name }) => name.toLowerCase() === stoneName.trim().toLowerCase()\n//         );\n\n//         if(!stoneOblj) {\n//         return `Камінь з назвою ${stoneName} не має!`;\n//         }\n\n//         const { price, quantity } = stoneOblj;\n\n//         return price * quantity;\n\n//     },\n// }\n\n// console.log(chopShop.calcTotalPrice('Emerald')); //7500\n// console.log(chopShop.calcTotalPrice('Sapphire')); //12600\n\n// const parent = document.querySelector(\"#parent\");\n\n// parent.addEventListener(\"click\", event => {\n//   console.log(\"event.target: \", event.target);\n//   console.log(\"event.currentTarget: \", event.currentTarget);\n// });\n\n// console.log('Hello');\n\n// const timer = {\n//   start() {\n//     const startTime = Date.now();\n\n//     setInterval(() => {\n//       const curentTime = Date.now();\n//       console.log(curentTime - startTime);\n//     }, 1000);\n//   },\n// };\n\n// timer.start();\n"],"names":[],"version":3,"file":"test.8b684b31.js.map"}